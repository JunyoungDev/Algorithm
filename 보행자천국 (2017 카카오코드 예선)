class Solution {
  int MOD = 20170805;
  int[][] gMap; 
  int gM, gN;
  long[][][] memo;
  public int solution(int m, int n, int[][] cityMap) {
      int answer = 0;
      gMap = cityMap;
      gM = m;
      gN = n;
      
      memo = new long[m][n][2];
      for(int i=0 ; i<m ; i++){
          for(int j=0;j<n;j++){
              memo[i][j][0] = -1;
              memo[i][j][1] = -1;
          }
      }
      answer = (int)(count_load(0,0,0)%MOD);
      return answer;
  }
    
    boolean check_pass(int x, int y){
        if(gM <= x ){
            return false;
        } 
        if(gN <= y ){
            return false;
        } 
        if(gMap[x][y] == 1){
            return false;
        }
        return true;
    }
    
    long count_load(int x, int y, int where){ // where = 0 왼쪽, 1=위
        if(check_pass(x,y)){
            if(x==gM - 1 && y == gN - 1){
                return 1;
            }
        
            if(memo[x][y][where] != -1){
                return memo[x][y][where];
            }
            int state = gMap[x][y];
            if(state == 0){
                return memo[x][y][where] = (count_load(x+1,y,0) + count_load(x,y+1,1))%MOD;
            }
            else if(state == 2){
                if(where == 0){
                    return memo[x][y][where] = (count_load(x+1,y,where))%MOD;
                }
                else if(where == 1){
                    return memo[x][y][where] = (count_load(x,y+1,where))%MOD;
                }
            }
        }
        return 0;
    }
}
