class Solution {
    
    public boolean solution(int[][] key, int[][] lock) {
        int n = (key.length > lock.length)? key.length-1 : lock.length-1;
         boolean answer=false ;
         for(int gogo=0; gogo<4; gogo++){
            for(int i=-n; i<= n ; i++){
                for(int j=-n ; j <= n; j++){
                   answer = check_insert(key, lock,i,j);
                   if(answer) return true;
                }
            }
            key = gogo90(key);
         }
        return false;
    }
    int[][] gogo90(int[][] board){
        int n = board.length-1;
        int[][] result = new int[n+1][n+1];
        for(int i=0; i<board.length;i++){
            for(int j=0; j<board.length;j++){
                result[j][n-i] = board[i][j];
            }
        }
        return result;
    }
    boolean check_insert(int[][] key, int[][] lock, int x, int y){
        x *= -1;
        y *= -1;
        for(int i=0; i< lock.length; i++){
            for(int j=0;j<lock.length;j++){
                if(j+x < key.length && j+x >= 0 && i+y>=0 &&i+y < key.length) {
                    if(key[i+y][j+x] + lock[i][j] != 1) return false;
                }
                else {
                    if(lock[i][j] != 1) return false;
                }
            }
        }
        return true;
    }

}
//https://programmers.co.kr/learn/courses/30/lessons/60059
