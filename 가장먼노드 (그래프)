import java.util.*;

class Solution {
    public int solution(int n, int[][] edge) {
        //거리 배열
        int[] dist = new int[n+1];
        for (int i=1; i<=n ; i++) {
            dist[i] = -1;
        }
        dist[1] = 0;
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(1);
        
        //노드 순회
        while(!q.isEmpty()){
            int node = q.poll();
            //노드에 연결된 리스트
            ArrayList<Integer> list = getLinkedList(node, edge);
            for (int  i : list) {
                //첫방문시 거리 체크
                if(dist[i] == -1) {
                    dist[i] = dist[node]+1;
                    q.add(i);
                }
            }

        }

        int count = 0;
        int maxNumber = 0;
        
        for (Integer i : dist) {
            //최고 넘버면 카운트 1
            if(maxNumber < i){
                    maxNumber = i;
                    count = 1;
                    continue;
            }
            if(maxNumber == i) count++;
        }
        return count;
    }
    //해당 노드번호와 연결된 모든 노드를 리스트로 반환
    public ArrayList<Integer> getLinkedList(int node, int[][] edge){
        ArrayList<Integer> list = new ArrayList<Integer>();
        
        //순회하며 간선 찾으면 list에 추가
        for(int i=0; i<edge.length ; i++){
            if(edge[i][0] == node) list.add(edge[i][1]);
            else if(edge[i][1] == node) list.add(edge[i][0]);
        }

        return list;
    }
}

//https://programmers.co.kr/learn/courses/30/lessons/49189
